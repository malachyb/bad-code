(lambda __g, __contextlib: [None for __g['rev'], rev.__name__ in [(lambda l: (lambda __l: [(lambda __out: (lambda __ctx: [__ctx.__enter__(), __ctx.__exit__(None, None, None), __out[0](lambda: None)][2])(__contextlib.nested(type('except', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: __exctype is not None and ([True for __out[0] in [((lambda ret: lambda after: ret)([__l['l'][-1]]))]][0])})(), type('try', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: [False for __out[0] in [((lambda ret: lambda after: ret)(([__l['l'][-1]] + rev(__l['l'][:-1]))))]][0]})())))([None]) for __l['l'] in [(l)]][0])({}), 'rev')]][0])(globals(), __import__('contextlib', level=0))
